@page "/"

<div class="row">
    <div class="col">
        <h1>Blazor Translator App</h1>
    </div>
</div>

<div class="row">
    <div class="col">
        <form>
            <div class="form-group">
                <label for="text-to-translate"><strong>Enter the text you'd like to translate:</strong></label>
                <textarea @bind=@SourceText class="form-control" id="text-to-translate" rows="5"></textarea>
            </div>
            <div class="form-group">
                <label for="select-language"><strong>Translate to:</strong></label>
                <select class="form-control" id="select-language" @bind=@SelectedLanguage>
                    <option value="">Choose a language</option>
                    <option value="ar">Arabic</option>
                    <option value="ca">Catalan</option>
                    <option value="zh-Hans">Chinese (Simplified)</option>
                    <option value="zh-Hant">Chinese (Traditional)</option>
                    <option value="hr">Croatian</option>
                    <option value="en">English</option>
                    <option value="fr">French</option>
                    <option value="de">German</option>
                    <option value="el">Greek</option>
                    <option value="he">Hebrew</option>
                    <option value="hi">Hindi</option>
                    <option value="it">Italian</option>
                    <option value="ja">Japanese</option>
                    <option value="ko">Korean</option>
                    <option value="pt">Portuguese</option>
                    <option value="ru">Russian</option>
                    <option value="es">Spanish</option>
                    <option value="th">Thai</option>
                    <option value="tr">Turkish</option>
                    <option value="vi">Vietnamese</option>
                </select>
            </div>
            <button type="button" @onclick="TranslateText" class="btn btn-primary mb-2" id="translate">Translate text</button>

            @if (TranslatorResponse != null && TranslatorResponse.Translations[0].Text.Length > 0)
            {
                <div id="detected-language">
                    <strong>Detected language:</strong> <span id="detected-language-result">@TranslatorResponse.DetectedLanguage.Language</span><br />
                    <strong>Detection confidence:</strong> <span id="confidence">@TranslatorResponse.DetectedLanguage.Score</span><br /><br />
                </div>
            }

        </form>
    </div>
    <div class="col">
        <form>
            <div class="form-group" id="translator-text-response">
                <label for="translation-result"><strong>Translated text:</strong></label>
                <textarea @bind=@ResponseText readonly class="form-control" id="translation-result" rows="5"></textarea>
            </div>
        </form>
    </div>
</div>

@code {

    string SourceText { get; set; }
    string ResponseText { get; set; }
    TranslationResult TranslatorResponse { get; set; }

    string SelectedLanguage { get; set; }

    private const string AzureTranslatorKey = "";
    private const string AzureTranslatorEndPoint = "https://api-eur.cognitive.microsofttranslator.com";

    async Task TranslateText()
    {
        if (string.IsNullOrEmpty(SelectedLanguage)) return;

        var translation = await TranslateTextRequest(AzureTranslatorKey, AzureTranslatorEndPoint, "/translate?api-version=3.0&to=" + SelectedLanguage, SourceText);

        TranslatorResponse = translation;
        ResponseText = translation.Translations[0].Text;
    }

    async Task<TranslationResult> TranslateTextRequest(string subscriptionKey, string endpoint, string route, string inputText)
    {
        object[] body = new object[] { new { Text = inputText } };
        var requestBody = JsonConvert.SerializeObject(body);

        using (var client = new HttpClient())
        using (var request = new HttpRequestMessage())
        {
            request.Method = HttpMethod.Post;
            request.RequestUri = new Uri(endpoint + route);
            request.Content = new StringContent(requestBody, Encoding.UTF8, "application/json");
            request.Headers.Add("Ocp-Apim-Subscription-Key", subscriptionKey);

            var response = await client.SendAsync(request).ConfigureAwait(false);
            string result = await response.Content.ReadAsStringAsync();
            var deserializedOutput = JsonConvert.DeserializeObject<TranslationResult[]>(result);

            if (deserializedOutput.Length > 0)
            {
                return deserializedOutput[0];
            }
        }

        return null;
    }

}